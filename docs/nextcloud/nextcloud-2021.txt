# nextcloud-2021.txt

+----------------------------------------------------------+
| Installation of NextCloud on bare metal (non-dockerized) |
+----------------------------------------------------------+


Do basic Debian install (see debian-stuff.txt)

# apt-get -y install ntpdate mlocate tmux debian-goodies apticron dnsutils sntp ufw whois unzip tor certbot python3-certbot-nginx nginx wget mariadb-server

# apt-get -y install php-fpm php-mysql

# apt-get install -y python3-socks imagemagick python3-setuptools python3-cryptography python3-dateutil python3-idna python3-requests python3-flake8 python3-django-timezone-field python3-pyqrcode python3-png python3-bandit libimage-exiftool-perl

# apt-get install -y php7.4 php7.4-fpm php7.4-mysql php-common php7.4-cli php7.4-common php7.4-json php7.4-opcache php7.4-readline php7.4-mbstring php7.4-xml php7.4-gd php7.4-curl php7.4-bcmath php7.4-gmp

Make sure php7.4-fpm is running:

# systemctl status php7.4-fpm


------------------------------------------------------------------------

Database (MariaDB)

------------------------------------------------------------------------


Install mariadb:

# apt-get -y install mariadb-server

Run initial setup of MariaDB:

# mysql_secure_installation

Log into MariaDB's MySQL monitor:

# mariadb

Create NextCloud database and assign persmissions:

MariaDB [(none)]> CREATE DATABASE nextcloud;

MariaDB [(none)]> GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'localhost' IDENTIFIED BY 'mypassword';

(password for myhhost.one is 'password')

MariaDB [(none)]> FLUSH PRIVILEGES;


------------------------------------------------------------------------

Install Nginx

------------------------------------------------------------------------

# apt-get install -y nginx

# systemctl status nginx

# nginx -v

# lynx <hostname>

# chown -Rv www-data:www-data /usr/share/nginx/html

Remove the (symlink for the) default site:

# rm /etc/nginx/sites-enabled/default

Create a new default site

# vim /etc/nginx/conf.d/default.conf

Paste the following:

<snip>
server {
  listen 80;
  listen [::]:80;
  server_name _;
  root /usr/share/nginx/html/;
  index index.php index.html index.htm index.nginx-debian.html;

  location / {
    try_files $uri $uri/ /index.php;
  }

  location ~ \.php$ {
    fastcgi_pass unix:/run/php/php7.4-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
    include snippets/fastcgi-php.conf;
  }

 # A long browser cache lifetime can speed up repeat visits to your page
  location ~* \.(jpg|jpeg|gif|png|webp|svg|woff|woff2|ttf|css|js|ico|xml)$ {
       access_log        off;
       log_not_found     off;
       expires           360d;
  }

  # disable access to hidden files
  location ~ /\.ht {
      access_log off;
      log_not_found off;
      deny all;
  }
}
</snip>

That will create a catch-all listener on port  80 for IPv4 and IPv6.

Check that the configs are okay, and if so, reload:

# nginx -t

# sysgtemctl reload nginx.service

Test fpm by creating /usr/share/nginx/html/info.php with the following:

<?php phpinfo(); ?>

# chown -v /usr/share/nginx/html/info.php

Test by visiting http://<your-server>/info.php

Error Log is located at: /var/log/nginx/error.log

Create a new dir and extension to the service so Nginx restarts every five seconds if it fails:

# mkdir -pv /etc/systemd/system/nginx.service.d/

# vim /etc/systemd/system/nginx.service.d/restart.conf

<snip>
[Service]
Restart=always
RestartSec=5s
</snip>

# systemctl daemon-reload	#reload systemd
# ps auxww |grep nginx		# note the PIDs
# pkill nginx				# kill nginx
# ps auxww |grep nginx		# note that the PIDs have changed
#systemctl status nginx		# check that it restarted automatically


+------------------------+
| NextCloud installation |
+------------------------+
------------------------------------------------------------------------

NextCloud:

------------------------------------------------------------------------

Check/compare for the following by doing an 

# apt-list --installed |grep php

and then install accordingly for any missing php packages:

# apt install php-fpm php-curl php-cli php-mysql php-gd php-common php-xml php-json php-intl php-pear php-imagick php-dev php-common php-mbstring php-zip php-soap php-bz2 -y

------------------------------------------------------------------------

Get nextcloud and install into home dir of non-priv user.

Download latest tarball of NextCloud server from:

https://nextcloud.com/install

Move the untarred directory to /usr/share/nginx/<host.sld.tld> or to
/var/www/<host.sld.tld> - whichever is your preference, or you can move
the gzipped/zipped tarball to /usr/shar/nginx or /var/www and untar.

probably something like:

tar jxvf <name_of_downloaded_tar.bz> # or
unzip <name_of_downloaded_zip_file>

Regardless, after exploding the archive, chown and rename the dir tree:

# chown -Rv www-data:www-data nextcloud 
# mv nextcloud <host.sld.tld> 

If you did this in your own home directory, then do this too afterward:

# move <host.sld.tld> /var/www/ # (or) /user/share/nginx/

I prefer /var/www and also useing /etc/nginx/sites-enabled with a link
to /etc/nginx/sites-available so I can turn a site on and off quickly,
but /usr/share/nginx and /etc/nginx/conf.d works too - your choice, just make sure you reflect your choice in the setup below and be consistent!

------------------------------------------------------------------------

Settings for php.ini (fpm and cli):

# locate php.ini	# you're looking for one in each dir (fpm and cli).

Uncomment the 'date.timezone' line and change the value with your own timezone.

date.timezone = America/Los_Angeles

Uncomment the 'cgi.fix_pathinfo' line and change the value to '0'.

cgi.fix_pathinfo=0

Save and exit.

Edit /etc/php/7.4/fpm/pool.d/www.conf - uncomment the following lines:

env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp

Restart fpm:

# systemctl restart php7.4-fpm
# ss -xa | grep php
# systemctl status php7.4-fpm	# should be enabled so it starts on boot

------------------------------------------------------------------------

Create the Nginx server block:

------------------------------------------------------------------------

There are two server block examples below.

#1

server {
    listen 80;
    listen [::]:80;
    server_name myhost.one;

    # Add headers to serve security related headers
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    add_header Referrer-Policy no-referrer;

    #I found this header is needed on Ubuntu, but not on Arch Linux. 
    add_header X-Frame-Options "SAMEORIGIN";

    # Path to the root of your installation
    #root /usr/share/nginx/nextcloud/;
    root /var/www/myhost.one/;

    access_log /var/log/nginx/nextcloud.access;
    error_log /var/log/nginx/nextcloud.error;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json
    # last;

    location = /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
       return 301 $scheme://$host/remote.php/dav;
    }

    location ~ /.well-known/acme-challenge {
      allow all;
    }

    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;

    # Disable gzip to avoid the removal of the ETag header
    gzip off;

    # Uncomment if your server is build with the ngx_pagespeed module
    # This module is currently not supported.
    #pagespeed off;

    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;

    location / {
       rewrite ^ /index.php;
    }

    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
       deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
       deny all;
     }

    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
       include fastcgi_params;
       fastcgi_split_path_info ^(.+\.php)(/.*)$;
       try_files $fastcgi_script_name =404;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       fastcgi_param PATH_INFO $fastcgi_path_info;
       #Avoid sending the security headers twice
       fastcgi_param modHeadersAvailable true;
       fastcgi_param front_controller_active true;
       fastcgi_pass unix:/run/php/php7.4-fpm.sock;
       fastcgi_intercept_errors on;
       fastcgi_request_buffering off;
    }

    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
       try_files $uri/ =404;
       index index.php;
    }

    # Adding the cache control header for js and css files
    # Make sure it is BELOW the PHP block
    location ~* \.(?:css|js)$ {
        try_files $uri /index.php$uri$is_args$args;
        add_header Cache-Control "public, max-age=7200";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        add_header Referrer-Policy no-referrer;
        # Optional: Don't log access to assets
        access_log off;
   }

   location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {
        try_files $uri /index.php$uri$is_args$args;
        # Optional: Don't log access to other assets
        access_log off;
   }
}






------------------------------------------------------------------------

#2

upstream php-handler {
    #server 127.0.0.1:9000;
    server unix:/var/run/php/php7.4-fpm.sock;
}

server {
    listen 80;
    listen [::]:80;
    server_name myhost.one;
    # enforce https
    return 301 https://$server_name:443$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name myhost.one;

    # Use Mozilla's guidelines for SSL/TLS settings
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # NOTE: some settings below might be redundant
    ssl_certificate /etc/letsencrypt/live/myhost.one/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/myhost.one/privkey.pem;

    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this
    # topic first.
    #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
    #
    # WARNING: Only add the preload option once you read about
    # the consequences in https://hstspreload.org/. This option
    # will add the domain to a hardcoded list that is shipped
    # in all major browsers and getting removed from this list
    # could take several months.
    add_header Referrer-Policy "no-referrer" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Download-Options "noopen" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header X-Robots-Tag "none" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Remove X-Powered-By, which is an information leak
    fastcgi_hide_header X-Powered-By;

    # Path to the root of your installation
    root /var/www/myhost.one;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

    # The following rule is only needed for the Social app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/webfinger /public.php?service=webfinger last;

    location = /.well-known/carddav {
      return 301 $scheme://$host:$server_port/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 $scheme://$host:$server_port/remote.php/dav;
    }

    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;

    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # Uncomment if your server is build with the ngx_pagespeed module
    # This module is currently not supported.
    #pagespeed off;

    location / {
        rewrite ^ /index.php;
    }

    location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
        deny all;
    }
    location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) {
        deny all;
    }

    location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) {
        fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
        set $path_info $fastcgi_path_info;
        try_files $fastcgi_script_name =404;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $path_info;
        fastcgi_param HTTPS on;
        # Avoid sending the security headers twice
        fastcgi_param modHeadersAvailable true;
        # Enable pretty urls
        fastcgi_param front_controller_active true;
        fastcgi_pass php-handler;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }

    location ~ ^\/(?:updater|oc[ms]-provider)(?:$|\/) {
        try_files $uri/ =404;
        index index.php;
    }

    # Adding the cache control header for js, css and map files
    # Make sure it is BELOW the PHP block
    location ~ \.(?:css|js|woff2?|svg|gif|map)$ {
        try_files $uri /index.php$request_uri;
        add_header Cache-Control "public, max-age=15778463";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        # Before enabling Strict-Transport-Security headers please read into
        # this topic first.
        #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
        #
        # WARNING: Only add the preload option once you read about
        # the consequences in https://hstspreload.org/. This option
        # will add the domain to a hardcoded list that is shipped
        # in all major browsers and getting removed from this list
        # could take several months.
        add_header Referrer-Policy "no-referrer" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Download-Options "noopen" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        add_header X-Robots-Tag "none" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Optional: Don't log access to assets
        access_log off;
    }

    location ~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$ {
        try_files $uri /index.php$request_uri;
        # Optional: Don't log access to other assets
        access_log off;
    }
}


------------------------------------------------------------------------

Enable the virtual host and test the configuration, and make sure there is no error.

# ln -s /etc/nginx/sites-available/myhost.one /etc/nginx/sites-enabled/

# nginx -t

# systemctl reload nginx
# systemctl restart php7.4-fpm

------------------------------------------------------------------------

Issue LetsEncrypt SSL cert, and force https 
(certbot will edit the server block config file). 

certbot --nginx --agree-tos --redirect --hsts --staple-ocsp --email joeuser@gmail.com -d myhost.one

------------------------------------------------------------------------

Post certbot insertions:

If necessary, change this line:

listen 443 ssl;	# managed by Certbot

to:

listen 443 ssl http2;	# managed by Certbot

and add this line in that same block below the ssl_dhparam line:

add_header Strict-Transport-Security "max-age=31536000" always;

That should speed things up a bit too.
------------------------------------------------------------------------

Security: Move /var/www/myhost.one/data to /var/www/nextcloud-data

# mv -v /var/www/myhost.one/data /var/www/nextcloud-data

Check perms:

# ls -la /var/www/nextcloud-data

(it's ownership should still be www-data:www-data)

------------------------------------------------------------------------

Configure PHP:

increase PHP memory limit from 128Mbytes (stock) to 512:

(Line 409 of php.ini should read:)

memory_limit = 128M

Change that to 512M.

Alternatively, run the following sed command:

# sed -i 's/memory_limit = 128M/memory_limit = 512M/g' /etc/php/7.4/fpm/php.ini


The following are other stock values and sensible new values. Affect these changes the same way.

line numbers may not match exactly, they are an approximation and may be different on your system.  

 upload_max_filesize = 2M		# set to 512M	(line 847)
 
 (Note: You should match that value above in your NextCloud config.php, since the lesser of the two will be your limit).

 
 max_execution_time = 30		# set to 360	(line 388)
 
 post_max_size = 8M				# set to 200M	(line 694)
 
 date.timezone = America/Detroit	# uncomment and change to your preferred timezone. If you've followed any of my earlier guides on Nginx or Apache setup then you've probably already done this. (Line 963)

You get the idea. Here are the following config settings as I recommend them to be set. Remember, some of these are commented out by default with a semi-colon ";", so you may need to uncomment them and change the value as well. 


 opcache.enable=1				# (line  1770)

 opcache.interned_strings_buffer=8	# Just uncomment prolly (line 1779)

 opcache.max_accelerated_files=10000	# Just uncomment (line 1783)

 opcache.memory_consumption=128		# uncomment (line 1776)
 opcache.save_comments=1			# uncomment (line 1811)
 opcache.revalidate_freq=1	# uncomment, change from 2 to 1 (line 1801)
 
# systemctl restart php7.4-fpm.service
# systemctl status php7.4-fpm.service

------------------------------------------------------------------------

uncomment the following line in /etc/php/7.4/fpm/pool.d/www.conf

;clear_env = no

Alternatively, the  following sed command will remove the semi-colon:

# sed -i 's/;clear_env = no/clear_env = no/g' /etc/php/7.4/fpm/pool.d/www.conf

# systemctl reload php7.4-fpm
------------------------------------------------------------------------

+---------------------------------------+
| Redis: Install and configure memcache |
+---------------------------------------+

At this point if you navigate in your NextCloud installation to:

Settings ==> Overview

You will probably notice the following message:

> No memory cache has been configured. To enhance your performance please configure a memcache if available.

We will install Redis to provide some cacching speed enhancements now.
------------------------------------------------------------------------

# apt-get install -y redis-server

# redis-server -v

# systemctl status redis-server # start and enable if it's not already

Install the PHP extension for Redis:

# apt install php-redis 

Check to see if Redis support is enabled (it should be):

# php --ri redis

If it isn't, then run the following and check again:

# phpenmod redis

Add the following to NextCloud config.php before the closing ");" tag

```
'memcache.distributed' => '\OC\Memcache\Redis',
'memcache.local' => '\OC\Memcache\Redis',
'memcache.locking' => '\OC\Memcache\Redis',
'redis' => array(
     'host' => 'localhost',
     'port' => 6379,
     ),
```

Now restart Nginx and PHP:

# systemctl restart nginx php7.4-fpm

Check your NextCloud installation (The message should be gone):

https://hostname.sld.tld>/settings/admin/overview

------------------------------------------------------------------------

Add a cronjob instead of AJAX:

create a crontab entry for the www-data user with the following:

# sudo -u www-data crontab -e

*/5 * * * * php7.4 -f /var/www/myhost.one/cron.php

------------------------------------------------------------------------



























